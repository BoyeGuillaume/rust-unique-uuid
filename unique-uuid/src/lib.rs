pub extern crate uuid;
pub use unique_uuid_derive::*;
use uuid::Uuid;

/// The storage structure for a unique tag.
///
/// This is a wrapper around a `Uuid` to provide a type-safe way to store
/// a unique tag generated by this crate.
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
#[repr(transparent)]
pub struct UniqueTag(pub Uuid);

/// A trait that associates a static type to a unique tag.
///
/// This is similar to the [`std::any::TypeId`] trait, but it is used to
/// provide a cross-platform *stable* way to identify a type.
pub trait UniqueTypeTag {
    /// The unique tag associated with the type.
    const TYPE_TAG: UniqueTag;

    /// Returns the type id number.
    fn type_id(&self) -> UniqueTag {
        Self::TYPE_TAG
    }
}
